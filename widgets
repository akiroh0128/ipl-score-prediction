import ipywidgets as widgets
from IPython.display import display, clear_output
import main
import pandas as pd

import warnings
warnings.filterwarnings("ignore")

dataset=pd.read_csv('data.csv')
cols_not_needed=['date', 'runs', 'wickets', 'overs', 'runs_last_5', 'wickets_last_5','mid', 'striker', 'non-striker']
ipl_data=dataset.drop(cols_not_needed,axis=1)
venue = widgets.Dropdown(options=ipl_data['venue'].unique().tolist(),description='Select Venue:')
batting_team = widgets.Dropdown(options =ipl_data['batting_team'].unique().tolist(),  description='Select Batting Team:')
bowling_team = widgets.Dropdown(options=ipl_data['bowling_team'].unique().tolist(),  description='Select Batting Team:')
striker = widgets.Dropdown(options=ipl_data['batsman'].unique().tolist(), description='Select Striker:')
bowler = widgets.Dropdown(options=ipl_data['bowler'].unique().tolist(), description='Select Bowler:')

predict_button = widgets.Button(description="Predict Score")

def predict_score(b):
    with output:
        clear_output()  # Clear the previous output
        

        # Decode the encoded values back to their original values
        decoded_venue = venue_encoder.transform([venue.value])
        decoded_batting_team = batting_team_encoder.transform([batting_team.value])
        decoded_bowling_team = bowling_team_encoder.transform([bowling_team.value])
        decoded_striker = striker_encoder.transform([striker.value])
        decoded_bowler = bowler_encoder.transform([bowler.value])


        input = np.array([decoded_venue,  decoded_batting_team, decoded_bowling_team,decoded_striker, decoded_bowler])
        input = input.reshape(1,5)
        input = scaler.transform(input)
        #print(input)
        predicted_score = model.predict(input)
        predicted_score = int(predicted_score[0,0])

        print(predicted_score)

predict_button.on_click(predict_score)
output = widgets.Output()
display(venue, batting_team, bowling_team, striker, bowler, predict_button, output)